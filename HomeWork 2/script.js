// Напишите рекурсивную функцию
// которая принимает положительное целое число и
// возвращает сумму всех чисел от 1 до заданного числа (включительно).
// Например, если функции передается число 5, она должна вернуть 15 (1 + 2 + 3 + 4 + 5).
function sumRecursive(n) {
    // Базовый случай: если число равно 1, возвращаем 1
    if (n === 1) {
      return 1;
    }
    
    // Рекурсивно вызываем функцию для числа n-1 и складываем с n
    return n + sumRecursive(n - 1);
  }

  console.log(sumRecursive(7))

//   =================
// Реализуйте рекурсивную функцию 
// которая принимает массив целых чисел и возвращает
// наибольшую сумму подмассива (последовательности элементов),
// которая может быть получена из этого массива.
// Подмассив должен содержать как минимум один элемент.
// Например, для массива [-2, 1, -3, 4, -1, 2, 1, -5, 4]
// функция должна вернуть 6, так как наибольшая сумма
// подмассива может быть получена из элементов [4, -1, 2, 1].

function maxSubarraySum(arr) {
    // Базовый случай: если массив состоит из одного элемента, возвращаем этот элемент
    if (arr.length === 1) {
      return arr[0];
    }
    
    // Рекурсивно вызываем функцию для подмассива, исключая первый элемент
    const maxSum = maxSubarraySum(arr.slice(1));
    
    // Вычисляем максимальную сумму, сравнивая сумму подмассива без первого элемента и сумму с первым элементом
    return Math.max(maxSum, maxSum + arr[0]);
  }
  
  // Пример использования функции
  const array = [-2, 1, -3, 4, -1, 2, 1, -5, 4];
  const maxSum = maxSubarraySum(array);
  console.log(maxSum); // Выводит 6
